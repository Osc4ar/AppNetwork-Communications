package Servers;

import Bucket.Bucket;
import java.net.*;
import java.io.*;

/* The class Sockets initialize a 'n' number of blocking server sockets, one per
 * bucket to receive, this buckets will be objects and each server will sort the
 * content of the bucket and will send back the object to the client.
 */

public class Sockets {
	
	public static ObjectOutputStream oos;
	public static ObjectInputStream ois;
	public static ServerSocket s;
	public static Socket cl;
	public static Bucket b;
	
	public static boolean init ( Integer port ) {
		
		try {
			s = new ServerSocket ( port );
			s.setReuseAddress ( true );
			System.out.println ( "\n\t\t\tSub-service initialized: " + s.getInetAddress ( ).getHostAddress ( ) + " : " + s.getLocalPort ( ) + ".\n\t\t\tWaiting for bucket." );
			return true;
		} catch ( Exception e ) {
			return false;
		} // End try - catch.
		
	} // End method.
	
	public static Bucket recv ( ) throws Exception {
		
		cl = s.accept ( );
		ois = new ObjectInputStream ( cl.getInputStream ( ) );
		Bucket b = ( Bucket ) ois.readObject ( );
		System.out.println ( "\n\t\t\t\tClient connected from: " + cl.getInetAddress ( ) + " : " + cl.getPort ( ) + "." );
		
		return b;
		
	} // End method.
	
	public static void send ( Bucket b ) {
		
		b = BubbleSort ( b );
		oos = new ObjectOutputStream ( cl.getOutputStream ( ) );
		oos.writeObject ( b );
		oos.flush ( );
		oos.close ( );
		ois.close ( );
		
	} // End method.

} // End class.
