package TCP;

import java.net.StandardSocketOptions;
import java.nio.channels.*;
import java.util.Iterator;
import java.net.*;

public class Socket {

	protected Iterator <SelectionKey> it;
	protected ServerSocketChannel ssc;
	protected SelectionKey k;
	protected Selector sel;
	protected String host;
	protected int port;
	
	public Socket ( String host, int port ) {
		
		this.host = host;
		this.port = port;
		
	} // End constructor.
	
	public void init ( ) throws Exception {
		
		ssc = ServerSocketChannel.open ( );
		ssc.configureBlocking ( false );
		ssc.setOption ( StandardSocketOptions.SO_REUSEADDR, true );
		ssc.socket ( ).bind ( new InetSocketAddress ( port ) );
		sel = Selector.open ( );
		ssc.register ( sel, SelectionKey.OP_ACCEPT ); 
		
	} // End method.
	
	public void start ( ) {
		
		try {
			for ( ; ; ) {
				try {
					sel.select ( );
					it = sel.selectedKeys ( ).iterator ( );
					while ( it.hasNext ( ) ) {
						k = ( SelectionKey ) it.next ( );
						it.remove ( );
						if ( k.isAcceptable ( ) ) {
							continue;
						} // End if.
						if ( k.isReadable ( ) ) {
							continue;
						} // End if.
						if ( k.isWritable ( ) ) {
							continue;
						} // End if.
					} // End while.
				} catch ( Exception e1 ) { }
			} // End forever.
		} catch ( Exception e ) {
			e.printStackTrace ( );
		} // End try - catch.
		
	} // End method.
	
} // End class.
