package PrivateSocket;

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.Hashtable;

public class Private {
	
	protected static Hashtable <Integer,String> ht;
	protected static String host;
	private static DatagramSocket s;

	public static void PrivateServerSocket ( ) {
		
		ht = new Hashtable <Integer,String> ( );
		host = "127.0.0.1";
		
		try {
			int port = 9709;
			s = new DatagramSocket ( port );
			System.out.println ( "\n\tPrivate Service initialized..." );
			for ( ; ; ) {
				DatagramPacket p = new DatagramPacket ( new byte [ 1500 ], 1500 );
				s.receive ( p );
				String pmsg = new String ( p.getData ( ), 0, p.getLength ( ) );
				String [ ] s = pmsg.split ( " " ); 
				String msg = "";
				 
				for ( int i = 1 ; i < s.length ; i++ ) {
					msg = msg + s [ i ];
				} // End for.
				
				if ( s [ 0 ].equalsIgnoreCase ( "<init>" ) ) {
					Init ( p, msg );
				} // End if.
				
				if ( s [ 0 ].equalsIgnoreCase ( "<msg>" ) ) {
					Message ( p, msg );
				} // End if.
				
			} // End forever.
		} catch ( Exception e ) {
			e.printStackTrace ( );
		} // End try - catch.
		
	} // End PrivateServerSocket.
	
	public static void Init ( DatagramPacket p, String user ) {
		
		ht.put ( p.getPort ( ), user );
		
	} // End Init.
	
	public static void Message ( DatagramPacket p, String msg ) throws Exception {
		
		s.send ( p );
		byte [ ] b = msg.getBytes ( ); 
		p = new DatagramPacket ( b, b.length, InetAddress.getByName ( host ) );
		
		
	} // End Message.

} // End Private class.
